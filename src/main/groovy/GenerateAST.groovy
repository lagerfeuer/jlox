package at.lagerfeuer.tool

import java.nio.file.Paths

def defineAst(String outputDir, String baseName, List<String> types) {
    String path = Paths.get(outputDir, baseName).toString() + ".java"
    PrintWriter writer = new PrintWriter(path, "UTF-8")

    // Opening
    writer.println("package at.lagerfeuer.lox;")
    writer.println()
    writer.println("import java.util.List;")
    writer.println("import at.lagerfeuer.lox.token.*;")
    writer.println()
    writer.println("// Generated by " + GenerateAST.class.getCanonicalName())
    writer.println("abstract class " + baseName + " {")

    // Content
    for (String type : types) {
        String[] parts = type.split(":")
        String className = parts[0].trim()
        String fields = parts[1].trim()
        defineType(writer, baseName, className, fields)
    }

    // Closing
    writer.println("}")
    writer.close()
}

def defineType(
        PrintWriter writer, String baseName, String className, String fieldList) {
    writer.println(String.format("  static class %s extends %s {", className, baseName))
    // Constructor
    writer.println(String.format("    %s (%s) {", className, fieldList))
    String[] fields = fieldList.split(", ")
    for (String field : fields) {
        String name = field.split(" ")[1];
        writer.println(String.format("      this.%s = %s;", name, name))
    }
    writer.println("    }")
    // Fields
    writer.println()
    for (String field : fields) {
        writer.println(String.format("   final %s;", field))
    }
    writer.println("  }")
}


// Main
def outputDir = new File("src/main/java/at/lagerfeuer/lox/parser/ast/")
if (!outputDir.exists())
    outputDir.mkdirs()
List<String> expr = Arrays.asList(
        "BinaryExpr : Expr left, Token operator, Expr right",
        "Grouping : Expr expression",
        "Literal : Object value",
        "UnaryExpr : Token operator, Expr right"
)
defineAst(outputDir.toString(), "Expr", expr)

